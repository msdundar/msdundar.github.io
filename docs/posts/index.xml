<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog of Serhat M. Dündar | Ruby, Rails, Golang, PostgreSQL, AWS, Security</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Blog of Serhat M. Dündar | Ruby, Rails, Golang, PostgreSQL, AWS, Security</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Oct 2024 03:51:48 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My New Post</title>
      <link>http://localhost:1313/posts/my-new-post/</link>
      <pubDate>Thu, 10 Oct 2024 03:51:48 +0200</pubDate>
      <guid>http://localhost:1313/posts/my-new-post/</guid>
      <description></description>
    </item>
    <item>
      <title>Disassociating Corporate Habits</title>
      <link>http://localhost:1313/posts/disassociating-corporate-habits/</link>
      <pubDate>Mon, 09 Sep 2024 01:33:06 +0200</pubDate>
      <guid>http://localhost:1313/posts/disassociating-corporate-habits/</guid>
      <description>&lt;p&gt;hello!&lt;/p&gt;</description>
    </item>
    <item>
      <title>A recap of 2023</title>
      <link>http://localhost:1313/posts/a-recap-of-2023/</link>
      <pubDate>Sun, 08 Jan 2023 02:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/a-recap-of-2023/</guid>
      <description>&lt;p&gt;Looking back, 2023 wasn&amp;rsquo;t a bad year at all. There are many events that I&amp;rsquo;m happy about and that I want to log and&#xA;many moments I want to remember.&lt;/p&gt;&#xA;&lt;h2 id=&#34;habits&#34;&gt;Habits&lt;/h2&gt;&#xA;&lt;p&gt;As a smoker for 17 years who tried all possible quitting methods, such as nicotine gums, e-cigarettes/vapors, and&#xA;varenicline medicines (chantix®/champix®, etc.), I finally stopped smoking. It’s hard to explain where I got the&#xA;motivation from, but one day I decided not to smoke and I’ve not smoked since then. While I quit smoking, I also quit&#xA;synthetic sugar at the same time, and I believe this really helped with my quitting process. Combining to quit these&#xA;two habits worked for me as my cravings were mainly about synthetic sugar, instead of nicotine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go runtimes in AWS Lambda</title>
      <link>http://localhost:1313/posts/go-lambda-functions-amazon-linux-vs-amazon-linux-2/</link>
      <pubDate>Sat, 19 Nov 2022 22:10:16 +0200</pubDate>
      <guid>http://localhost:1313/posts/go-lambda-functions-amazon-linux-vs-amazon-linux-2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;AL2 runtimes and migrating from AL1 to AL2 for NodeJS, Python, Ruby, and .NET are pretty straightforward. The only&#xA;exception is Go. Things are a bit cumbersome there as a custom runtime named &lt;code&gt;provided.al2&lt;/code&gt; comes into play.&lt;/p&gt;&#xA;&lt;p&gt;By the time of this writing, the following runtimes are&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&#34;&gt;provided&lt;/a&gt; by AWS:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Name&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Identifier&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Operating system&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Architectures&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Node.js 18&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;nodejs18.x&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Node.js 16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;nodejs16.x&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Node.js 14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;nodejs14.x&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Node.js 12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;nodejs12.x&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Python 3.9&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;python3.9&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Python 3.8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;python3.8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Python 3.7&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;python3.7&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Amazon Linux&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;x86_64&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Java 11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;java11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Java 8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;java8.al2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Java 8&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;java8&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Amazon Linux&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;x86_64&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;.NET Core 3.1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;dotnetcore3.1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;.NET 6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;dotnet6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;.NET 5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;dotnet5.0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Go 1.x&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;go1.x&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Amazon Linux&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;x86_64&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ruby 2.7&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ruby2.7&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Custom Runtime&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;provided.al2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64, arm64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Custom Runtime&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;provided&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Amazon Linux&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;x86_64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;As can be seen above, the &lt;code&gt;go1.x&lt;/code&gt; runtime is still on AL1 instead of AL2. One of the major differences between AL1 and&#xA;AL2 is supported architectures. AL2 comes with &lt;code&gt;arm64&lt;/code&gt; support. To benefit from &lt;code&gt;arm64&lt;/code&gt; support, and to migrate to a&#xA;more performance/cost-efficient AL2, &lt;code&gt;provided.al2&lt;/code&gt; is the only option for Go lambda functions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Securing Webhooks</title>
      <link>http://localhost:1313/posts/securing-webhooks/</link>
      <pubDate>Sun, 18 Sep 2022 20:10:16 +0200</pubDate>
      <guid>http://localhost:1313/posts/securing-webhooks/</guid>
      <description>&lt;p&gt;In this post, I will focus on the rationale behind some popular webhook security methods and will try to explain&#xA;them in simple terms.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-basics-risks-and-measures&#34;&gt;1. Basics Risks and Measures&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-webhooks-can-be-set-to-leak-data-silently&#34;&gt;1.1. Webhooks can be set to leak data silently&lt;/h3&gt;&#xA;&lt;p&gt;Let’s assume you are a webhook provider and an attacker compromises the credentials of one of your clients. If your&#xA;platform doesn’t notify users when a webhook is created or updated - the attacker can create a webhook silently and&#xA;start leaking data without alerting anyone. This silent tunnel will let the attacker stay in the system longer&#xA;undetected. Therefore:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deconstructing and Understanding an SSL Certificate</title>
      <link>http://localhost:1313/posts/deconstructing-and-understanding-an-ssl-certificate/</link>
      <pubDate>Tue, 25 Jan 2022 07:10:50 +0200</pubDate>
      <guid>http://localhost:1313/posts/deconstructing-and-understanding-an-ssl-certificate/</guid>
      <description>&lt;p&gt;Checking SSL certificates on a browser is easy. Just click the green lock icon and you&amp;rsquo;re good to go. But what if&#xA;doing the same in a more hacker way? This is where &lt;code&gt;openssl&lt;/code&gt; comes into play.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start by checking the SSL certificate of this website:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl s_client -connect www.serhatdundar.com:443&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA&#xA;depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert SHA2 High Assurance Server CA&#xA;depth=0 C = US, ST = California, L = San Francisco, O = &amp;#34;GitHub, Inc.&amp;#34;, CN = www.github.com&#xA;---&#xA;Certificate chain&#xA; 0 s:/C=US/ST=California/L=San Francisco/O=GitHub, Inc./CN=www.github.com&#xA;   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 High Assurance Server CA&#xA; 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 High Assurance Server CA&#xA;   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance EV Root CA&#xA;---&#xA;Server certificate&#xA;-----BEGIN CERTIFICATE-----&#xA;MIIHMDCCBhigAwIBAgIQAkk+B/qeN1otu8YdlEMPzzANBgkqhkiG9w0BAQsFADBw&#xA;MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3&#xA;d3cuZGlnaWNlcnQuY29tMS8wLQYDVQQDEyZEaWdpQ2VydCBTSEEyIEhpZ2ggQXNz&#xA;dXJhbmNlIFNlcnZlciBDQTAeFw0yMDA1MDYwMDAwMDBaFw0yMjA0MTQxMjAwMDBa&#xA;MGoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T&#xA;YW4gRnJhbmNpc2NvMRUwEwYDVQQKEwxHaXRIdWIsIEluYy4xFzAVBgNVBAMTDnd3&#xA;dy5naXRodWIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsj49&#xA;...&#xA;-----END CERTIFICATE-----&#xA;subject=/C=US/ST=California/L=San Francisco/O=GitHub, Inc./CN=www.github.com&#xA;issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 High Assurance Server CA&#xA;---&#xA;No client certificate CA names sent&#xA;Server Temp Key: ECDH, X25519, 253 bits&#xA;---&#xA;SSL handshake has read 3673 bytes and written 289 bytes&#xA;---&#xA;New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES128-GCM-SHA256&#xA;Server public key is 2048 bit&#xA;Secure Renegotiation IS supported&#xA;Compression: NONE&#xA;Expansion: NONE&#xA;No ALPN negotiated&#xA;SSL-Session:&#xA;    Protocol  : TLSv1.2&#xA;    Cipher    : ECDHE-RSA-AES128-GCM-SHA256&#xA;    Session-ID: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#xA;    Session-ID-ctx:&#xA;    Master-Key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#xA;    TLS session ticket lifetime hint: 7200 (seconds)&#xA;    TLS session ticket:&#xA;    0000 - xx xx 60 d0 86 88 c0 26-2e 67 c0 e0 01 84 09 ab   .,`....&amp;amp;.x......&#xA;    0010 - xx xx 95 f2 fa fa 1f f6-01 06 e3 99 23 2d 69 9a   i...........#-x.&#xA;    0020 - xx xx d1 f6 98 35 b5 f4-8f 91 47 b1 8e a6 d4 d2   *....6....G.....&#xA;    0030 - xx xx b2 f4 61 f1 b0 7d-43 cb 66 62 c6 15 52 ad   \*..x..}C.fb..R.&#xA;    0040 - xx xx c3 f9 a9 f3 f8 e7-f2 7f b8 d3 0e 02 d2 da   /...x...........&#xA;    0050 - xx xx 0f 8f c1 1c 6e b3-f0 ae 4c ac 4e f6 8d 7c   g.....x...L.N..|&#xA;    0060 - xx xx 3b 2a 77 b3 c2 f0-2b e3 9f 73 1e db 07 6c   /.;*x...+..s...l&#xA;    0070 - xx xx a3 b5 42 74 de 4b-55 73 15 cf b0 97 c7 84   &amp;lt;...Bx.KUs......&#xA;    0080 - xx xx 65 ee cc 68 35 68-76 ef 7b 4a 7b 41 b3 94   ..e..x5hv.{J{A..&#xA;    0090 - xx xx 57 3f 74 a8 e8 0a-ec de 8b 77 49 f9 33 b0   `0W?x......wI.3.&#xA;&#xA;    Start Time: 1643082971&#xA;    Timeout   : 7200 (sec)&#xA;    Verify return code: 0 (ok)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s investigate this response piece by piece.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Storing Passwords in a Database: Hashing, Salts, and Peppers</title>
      <link>http://localhost:1313/posts/storing-passwords-in-a-database/</link>
      <pubDate>Mon, 24 Jan 2022 01:30:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/storing-passwords-in-a-database/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;How do you store passwords in a database&amp;rdquo;&lt;/em&gt;? A very common question for back-end-oriented interviews. After conducting&#xA;hundreds of technical interviews on different levels, I can confidently say around 50% of the candidates can&amp;rsquo;t answer&#xA;this question. The most common answer I often got is&#xA;&lt;em&gt;&amp;ldquo;there is a package/gem/library we use, and it manages the password part&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Well, yes, frameworks, libraries, and packages cover most of the complexity nowadays, but I don&amp;rsquo;t accept this as an&#xA;excuse for not being curious about essentials. Frameworks, packages, libraries, tools, text editors - they come and go&#xA;all the time, but essentials just don&amp;rsquo;t. The ways we use to store passwords haven&amp;rsquo;t been changed much since I started&#xA;programming, which was 15 years ago.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Primitive Hashing Function in Go</title>
      <link>http://localhost:1313/posts/a-primitive-hashing-function-in-go/</link>
      <pubDate>Sun, 23 Jan 2022 18:30:19 +0200</pubDate>
      <guid>http://localhost:1313/posts/a-primitive-hashing-function-in-go/</guid>
      <description>&lt;p&gt;Cryptographic hash functions are complex mathematical calculations. Therefore understanding them requires a considerable&#xA;amount of time and patience. However, they all have things in common: an input, a cryptographic algorithm, and an output.&lt;/p&gt;&#xA;&lt;p&gt;Recently, I had a chance to study some popular cryptographic hash functions, such as&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34;&gt;MD5&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/SHA-1&#34;&gt;SHA-1&lt;/a&gt;, and tried to understand how&#xA;they really work. Wikipedia pages I linked include a considerable amount of information already, and more can be found&#xA;online, but what I want to do was understand similarities between them and write my own primitive hashing&#xA;function in Go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSL/TLS Handshake, Hybrid Encryption and Public Key Infrastructure (PKI)</title>
      <link>http://localhost:1313/posts/ssl-tls-handshake-hybrid-encryption/</link>
      <pubDate>Sat, 22 Jan 2022 14:00:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/ssl-tls-handshake-hybrid-encryption/</guid>
      <description>&lt;h3 id=&#34;hybrid-encryption-symmetric-and-asymmetric-encryption-combined&#34;&gt;Hybrid Encryption: Symmetric and Asymmetric Encryption Combined&lt;/h3&gt;&#xA;&lt;p&gt;Both symmetric and asymmetric encryption has advantages and disadvantages. So, which one should we use? Well, nowadays&#xA;we often use them together. Asymmetric encryption is often used to exchange private keys between parties securely. In&#xA;other words, parties who would communicate establish an asymmetric encryption protocol in the beginning just to&#xA;exchange private keys. When the private key exchange is completed, they keep communicating by using symmetric&#xA;encryption - which is faster than asymmetric encryption.  This is also how SSL/TLS works.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Symmetric and Asymmetric Encryption</title>
      <link>http://localhost:1313/posts/symmetric-and-asymmetric-encryption/</link>
      <pubDate>Fri, 21 Jan 2022 14:00:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/symmetric-and-asymmetric-encryption/</guid>
      <description>&lt;h3 id=&#34;symmetric-encryption-private-key-cryptography&#34;&gt;Symmetric Encryption (Private Key Cryptography)&lt;/h3&gt;&#xA;&lt;p&gt;In symmetric encryption only a single key, in other words, a private key is used to encrypt and decrypt a message.&#xA;Symmetric encryption is also known as &amp;ldquo;Private Key Cryptography&amp;rdquo; as the whole encryption is only based on a private key.&lt;/p&gt;&#xA;&lt;p&gt;Some popular &lt;em&gt;symmetric&lt;/em&gt; encryption algorithms are:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Algorithm&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Cipher&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Key Size&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Block/State Size&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Popularity&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Notes&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;AES&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128, 192, or 256 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;The best one. Still in use.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Blowfish&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;32-448 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;64 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Still quite safe, but slower than AES.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Twofish&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128, 192, or 256 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Still quite safe, but slower than AES.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DES&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;56 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;64 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Not considered as safe anymore.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3DES&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Block&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;112, or 168 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;64 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Not considered as safe anymore.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;RC4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Stream&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;40-2048 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2064 bits&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Not considered as safe anymore.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;Pros of symmetric encryption:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Canary AWS Lambda Deployments</title>
      <link>http://localhost:1313/posts/canary-aws-lambda-deployments/</link>
      <pubDate>Mon, 14 Jun 2021 22:50:45 +0200</pubDate>
      <guid>http://localhost:1313/posts/canary-aws-lambda-deployments/</guid>
      <description>&lt;p&gt;Lambdas aren&amp;rsquo;t easy. This isn&amp;rsquo;t just a provocative start, but instead my overall&#xA;experience planning, creating, and deploying them.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s be honest, making something up and running requires plenty of AWS&#xA;knowledge. One might get lost easily even inside IAM alone.&lt;/p&gt;&#xA;&lt;p&gt;IAM groups, IAM users, IAM roles, IAM group policy attachments,  IAM policy&#xA;documents, IAM role policies - and how they connect is confusing enough&#xA;considering what Lambda promises, simplicity. And this is just IAM.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Book Review: The Design of Web APIs</title>
      <link>http://localhost:1313/posts/book-review-the-design-of-web-apis/</link>
      <pubDate>Sun, 02 May 2021 20:10:16 +0200</pubDate>
      <guid>http://localhost:1313/posts/book-review-the-design-of-web-apis/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Title: The Design of Web APIs&#xA;ISBN13: 978-1617295102&#xA;Publisher: Manning&#xA;WWW: https://www.manning.com/books/the-design-of-web-apis&#xA;Pages: 389&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I recently had a chance to read &amp;ldquo;The Design of Web APIs&amp;rdquo; from Manning Publishing.&#xA;The book is inspired by &amp;ldquo;The Design of Everyday Things&amp;rdquo;, the legendary writing&#xA;of Donald Norman, that I still own as an original hard-copy printed in 1990.&#xA;I like this masterpiece not because I studied Donald Norman quite a lot during&#xA;my PhD studies (especially during the&#xA;&lt;a href=&#34;https://hci.cc.metu.edu.tr/en/&#34;&gt;Human-Computer Interaction&lt;/a&gt; course), but also&#xA;it&amp;rsquo;s still very relevant writing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Packing JS projects for AWS Lambda with Grunt</title>
      <link>http://localhost:1313/posts/packing-js-projects-for-aws-lambda-with-grunt/</link>
      <pubDate>Sat, 02 May 2020 20:40:46 +0200</pubDate>
      <guid>http://localhost:1313/posts/packing-js-projects-for-aws-lambda-with-grunt/</guid>
      <description>&lt;p&gt;Grunt is a Javascript task runner. It automates repetitive tasks like&#xA;minification, compilation, unit testing, linting, etc. So it&amp;rsquo;s also quite useful&#xA;for packing JS projects for AWS Lambda.&lt;/p&gt;&#xA;&lt;p&gt;Install the CLI globally:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install -g grunt-cli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add it to the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install grunt --save-dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Gruntfile.js&lt;/code&gt; or &lt;code&gt;Gruntfile.coffee&lt;/code&gt; file is a valid JavaScript or&#xA;CoffeeScript file that belongs in the root directory of your project.&lt;/p&gt;&#xA;&lt;p&gt;A Gruntfile is comprised of the following parts:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rails and PostgreSQL: Types</title>
      <link>http://localhost:1313/posts/rails-and-postgresql-types/</link>
      <pubDate>Fri, 09 Nov 2018 19:24:20 +0200</pubDate>
      <guid>http://localhost:1313/posts/rails-and-postgresql-types/</guid>
      <description>&lt;p&gt;During &lt;a href=&#34;https://github.com/omu/nokul&#34;&gt;nokul&lt;/a&gt; we&amp;rsquo;ve heavily implemented PostgreSQL features into our&#xA;Rails application. Unfortunately, ActiveRecord doesn&amp;rsquo;t come with constraint support for PostgreSQL,&#xA;but &lt;a href=&#34;https://github.com/nullobject/rein&#34;&gt;rein&lt;/a&gt; does a fantastic job covering what&amp;rsquo;s missing in ActiveRecord.&#xA;We believe that, one shouldn&amp;rsquo;t rely on a web application, that is very prone for human-error, when it comes&#xA;to data integrity. Therefore our PostgreSQL tables included various constraints and limits.&lt;/p&gt;&#xA;&lt;p&gt;Below you will find a set of rules that we&amp;rsquo;ve investigated, implemented and battle tested with various types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rails and PostgreSQL: Constraints</title>
      <link>http://localhost:1313/posts/rails-and-postgresql-constraints/</link>
      <pubDate>Sat, 03 Nov 2018 15:24:20 +0200</pubDate>
      <guid>http://localhost:1313/posts/rails-and-postgresql-constraints/</guid>
      <description>&lt;p&gt;During &lt;a href=&#34;https://github.com/omu/nokul&#34;&gt;nokul&lt;/a&gt; we&amp;rsquo;ve heavily implemented PostgreSQL features into our&#xA;Rails application. Unfortunately, ActiveRecord doesn&amp;rsquo;t come with constraint support for PostgreSQL,&#xA;but &lt;a href=&#34;https://github.com/nullobject/rein&#34;&gt;rein&lt;/a&gt; does a fantastic job covering what&amp;rsquo;s missing in ActiveRecord.&#xA;We believe that, one shouldn&amp;rsquo;t rely on a web application, that is very prone for human-error, when it comes&#xA;to data integrity. Therefore our PostgreSQL tables included various constraints and limits.&lt;/p&gt;&#xA;&lt;p&gt;Below you will find a set of rules that we&amp;rsquo;ve investigated, implemented and battle tested with various types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tuning PostgreSQL Configuration</title>
      <link>http://localhost:1313/posts/tuning-postgresql-configuration/</link>
      <pubDate>Fri, 02 Nov 2018 11:16:48 +0200</pubDate>
      <guid>http://localhost:1313/posts/tuning-postgresql-configuration/</guid>
      <description>&lt;h2 id=&#34;configuration-file&#34;&gt;Configuration File&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;RAM amounts defined below doesn&amp;rsquo;t represent the total amount of memory&#xA;available for your machine, instead, it represents what PostgreSQL can use&#xA;maximum.&lt;/li&gt;&#xA;&lt;li&gt;Decribed configuration requires PostgreSQL &amp;gt;= 10. Remove &lt;code&gt;max_parallel_workers&lt;/code&gt;&#xA;for older versions.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The configuration file is usually located at &lt;code&gt;/etc/postgresql/$VERSION/main/postgresql.conf&lt;/code&gt;&#xA;in Debian-derivatives. For locating the file in other operating systems, you can&#xA;use &lt;code&gt;psql&lt;/code&gt; as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psql -U postgres&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;show config_file;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tracking-query-statistics&#34;&gt;Tracking Query Statistics&lt;/h2&gt;&#xA;&lt;p&gt;Enable the &lt;code&gt;pg_stat&lt;/code&gt; extension, if you are interested in tracking query statistics:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypting Sensitive Data With Rails</title>
      <link>http://localhost:1313/posts/encrypting-sensitive-data-with-rails/</link>
      <pubDate>Mon, 01 Oct 2018 09:33:06 +0200</pubDate>
      <guid>http://localhost:1313/posts/encrypting-sensitive-data-with-rails/</guid>
      <description>&lt;p&gt;The most recent versions (5.1 and 5.2) of Ruby on Rails has shipped with a new&#xA;feature named as &lt;a href=&#34;https://edgeguides.rubyonrails.org/security.html#custom-credentials&#34;&gt;encrypted credentials&lt;/a&gt; which replaces the &lt;code&gt;secrets.yml&lt;/code&gt;, and enables you to keep sensitive data in an&#xA;encrypted file named as &lt;code&gt;config/credentials.yml.enc&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;However, this feature only works with a single file that is&#xA;&lt;code&gt;config/credentials.yml.enc&lt;/code&gt;. Recently we needed to add some data in our&#xA;repository, which we wanted to keep as encrypted, but that also didn&amp;rsquo;t really&#xA;fit into the &lt;code&gt;credentials.yml.enc&lt;/code&gt; conceptually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rails Instantiated Fixtures</title>
      <link>http://localhost:1313/posts/rails-instantiated-fixtures/</link>
      <pubDate>Wed, 03 May 2017 18:52:34 +0200</pubDate>
      <guid>http://localhost:1313/posts/rails-instantiated-fixtures/</guid>
      <description>&lt;p&gt;Here is a sample Ruby on Rails fixture named as &lt;code&gt;newsletter&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;newsletter&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bar&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bar&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two popular ways to use this fixture in your Rails tests. The first one is directly calling the name of&#xA;fixture file, followed by a symbol stating the name of any individual fixture:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewsletterTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a sample test&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assert newsletters(&lt;span style=&#34;color:#e6db74&#34;&gt;:newsletter&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the other one is assigning fixtures to an instance variable in the &lt;code&gt;setup&lt;/code&gt; block:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Import Big MySQL Databases Faster</title>
      <link>http://localhost:1313/posts/import-big-mysql-databases-faster/</link>
      <pubDate>Wed, 05 Apr 2017 11:44:19 +0200</pubDate>
      <guid>http://localhost:1313/posts/import-big-mysql-databases-faster/</guid>
      <description>&lt;p&gt;I recently had to import some quite large SQL dumps to my local machine for data&#xA;analysis purposes. There were 10 different &lt;code&gt;.sql&lt;/code&gt; dumps in total, and each of&#xA;them were sized more than 100GB.&lt;/p&gt;&#xA;&lt;h2 id=&#34;naive-attempt&#34;&gt;Naive Attempt&lt;/h2&gt;&#xA;&lt;p&gt;First of all, I tried to import each by using the &lt;code&gt;&amp;lt;&lt;/code&gt; operator:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql some_database &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; some_dump.&lt;span style=&#34;color:#66d9ef&#34;&gt;sql&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unsurprisingly, each task took very long to finish, approximately 6-7 hours&#xA;per dump file, in a brand new laptop with i7 CPU, 16GB RAM and 1TB SSD.&#xA;Since I didn&amp;rsquo;t have 60 hours for importing all, I had to take a look for&#xA;solutions that can potentially speed up the process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running Rake Tasks in a Loop</title>
      <link>http://localhost:1313/posts/running-rake-tasks-in-a-loop/</link>
      <pubDate>Mon, 03 Apr 2017 01:46:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/running-rake-tasks-in-a-loop/</guid>
      <description>&lt;p&gt;Rake tasks in a loop, will only executed once if they are not &amp;ldquo;re-enabled&amp;rdquo;.&#xA;Take a look at this example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;namespace &lt;span style=&#34;color:#e6db74&#34;&gt;:yoksis&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fetches all references&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  task &lt;span style=&#34;color:#e6db74&#34;&gt;:references&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;get_instruction_language&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UnitInstructionLanguage&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;get_instruction_type&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UnitInstructionType&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mapping&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;action, klass&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yoksis:reference&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;invoke(action, klass)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  desc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fetch an individual reference&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  task &lt;span style=&#34;color:#e6db74&#34;&gt;:reference&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;soap_method klass&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:environment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_, args&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:soap_method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:klass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run the &lt;code&gt;yoksis:references&lt;/code&gt; task, it will only print out&#xA;&lt;code&gt;{get_instruction_language: &#39;UnitInstructionLanguage&#39;}&lt;/code&gt; and will skip the&#xA;second item of the &lt;code&gt;mapping&lt;/code&gt; hash.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using has_many :through for Nested Relations in Rails</title>
      <link>http://localhost:1313/posts/using-has-many-through-for-nested-relations-in-rails/</link>
      <pubDate>Sat, 20 Aug 2016 21:19:04 +0200</pubDate>
      <guid>http://localhost:1313/posts/using-has-many-through-for-nested-relations-in-rails/</guid>
      <description>&lt;p&gt;&lt;code&gt;has_many :through&lt;/code&gt; is a useful association type of Rails. It&amp;rsquo;s mostly popular and often used as a join model for&#xA;many-to-many relations.&lt;/p&gt;&#xA;&lt;p&gt;However, &lt;code&gt;has_many :through&lt;/code&gt; is more than a simple join model, because it conducts INNER JOIN(s) on related models. We&#xA;can also take the advantage of this behaviour on nested &lt;code&gt;has_many&lt;/code&gt; relations. Lets imagine a scenario where we have a&#xA;nested &lt;code&gt;has_many&lt;/code&gt; structure as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Country&lt;/span&gt; (has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:regions&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Region&lt;/span&gt; (has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:cities&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;City&lt;/span&gt; (has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:districts&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;District&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Models and tables of the structure:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boolean Type Words in YAML</title>
      <link>http://localhost:1313/posts/boolean-type-words-in-yaml/</link>
      <pubDate>Tue, 07 Jun 2016 09:10:16 +0200</pubDate>
      <guid>http://localhost:1313/posts/boolean-type-words-in-yaml/</guid>
      <description>&lt;p&gt;YAML is a widely used data serialization language. In almost any software&#xA;project, or during any dev-ops tasks, you can come across with YAML.&#xA;For example Ruby on Rails uses YAML for fixtures, configuration files and&#xA;localization. CI/CD tools such as CircleCI and Travis also use YAML for&#xA;configuration. If you ever experienced a strange behaviour with YAML, you may&#xA;have used one of the many reserved words of YAML. YAML reserves some words&#xA;such as &amp;lsquo;yes&amp;rsquo;, &amp;rsquo;no&amp;rsquo;, &amp;lsquo;y&amp;rsquo;, &amp;rsquo;n&amp;rsquo;, &amp;lsquo;off&amp;rsquo;, &amp;lsquo;on&amp;rsquo;, etc. for boolean type. For example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Calculating Similarity Between Two Data With Ruby and Elasticsearch</title>
      <link>http://localhost:1313/posts/calculating-similarity-between-two-data-with-ruby-and-elasticsearch/</link>
      <pubDate>Tue, 08 Dec 2015 19:04:50 +0200</pubDate>
      <guid>http://localhost:1313/posts/calculating-similarity-between-two-data-with-ruby-and-elasticsearch/</guid>
      <description>&lt;p&gt;I recently had to find similar data located in a dataset, in order to find potential duplicate records:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;John Doe 123456789&amp;#34;&#xA;&amp;#34;John Foe 123123123&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After considering a couple of options, I&amp;rsquo;ve decided to continue with Elasticsearch, as it was already integrated in the&#xA;project I was working on. The Ruby client of Elasticsearch provided a useful function on search results,&#xA;&lt;code&gt;records.each_with_hit&lt;/code&gt;, that I could abuse for this situation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some_file_path&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Searching for: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id_number&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;records&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_with_hit {&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;r, hit&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map{&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;k, v&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id_number&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_score&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; (u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id_number &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;to_f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;                           &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;y&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;***********************************&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;1.2&lt;/code&gt; value in the script can be adjusted according to your needs. It will basically represent how close two values&#xA;are. You might choose to increase it, if you want your results to cover a wider range of records, or decrease it&#xA;if you are only interested in values looking very similar. Here is a sample output for the script:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
