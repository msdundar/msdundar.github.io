<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rails on msdundar</title>
    <link>https://www.serhatdundar.com/tags/rails/</link>
    <description>Recent content in rails on msdundar</description>
    <image>
      <url>https://www.serhatdundar.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.serhatdundar.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Nov 2018 19:24:20 +0200</lastBuildDate><atom:link href="https://www.serhatdundar.com/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails and PostgreSQL: Types</title>
      <link>https://www.serhatdundar.com/posts/rails-and-postgresql-types/</link>
      <pubDate>Fri, 09 Nov 2018 19:24:20 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/rails-and-postgresql-types/</guid>
      <description>During nokul we&amp;rsquo;ve heavily implemented PostgreSQL features into our Rails application. Unfortunately, ActiveRecord doesn&amp;rsquo;t come with constraint support for PostgreSQL, but rein does a fantastic job covering what&amp;rsquo;s missing in ActiveRecord. We believe that, one shouldn&amp;rsquo;t rely on a web application, that is very prone for human-error, when it comes to data integrity. Therefore our PostgreSQL tables included various constraints and limits.
Below you will find a set of rules that we&amp;rsquo;ve investigated, implemented and battle tested with various types.</description>
    </item>
    
    <item>
      <title>Rails and PostgreSQL: Constraints</title>
      <link>https://www.serhatdundar.com/posts/rails-and-postgresql-constraints/</link>
      <pubDate>Sat, 03 Nov 2018 15:24:20 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/rails-and-postgresql-constraints/</guid>
      <description>During nokul we&amp;rsquo;ve heavily implemented PostgreSQL features into our Rails application. Unfortunately, ActiveRecord doesn&amp;rsquo;t come with constraint support for PostgreSQL, but rein does a fantastic job covering what&amp;rsquo;s missing in ActiveRecord. We believe that, one shouldn&amp;rsquo;t rely on a web application, that is very prone for human-error, when it comes to data integrity. Therefore our PostgreSQL tables included various constraints and limits.
Below you will find a set of rules that we&amp;rsquo;ve investigated, implemented and battle tested with various types.</description>
    </item>
    
    <item>
      <title>Encrypting Sensitive Data With Rails</title>
      <link>https://www.serhatdundar.com/posts/encrypting-sensitive-data-with-rails/</link>
      <pubDate>Mon, 01 Oct 2018 09:33:06 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/encrypting-sensitive-data-with-rails/</guid>
      <description>The most recent versions (5.1 and 5.2) of Ruby on Rails has shipped with a new feature named as encrypted credentials which replaces the secrets.yml, and enables you to keep sensitive data in an encrypted file named as config/credentials.yml.enc.
However, this feature only works with a single file that is config/credentials.yml.enc. Recently we needed to add some data in our repository, which we wanted to keep as encrypted, but that also didn&amp;rsquo;t really fit into the credentials.</description>
    </item>
    
    <item>
      <title>Rails Instantiated Fixtures</title>
      <link>https://www.serhatdundar.com/posts/rails-instantiated-fixtures/</link>
      <pubDate>Wed, 03 May 2017 18:52:34 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/rails-instantiated-fixtures/</guid>
      <description>Here is a sample Ruby on Rails fixture named as newsletter:
newsletter: name: foo message: bar first_name: foo last_name: bar There are two popular ways to use this fixture in your Rails tests. The first one is directly calling the name of fixture file, followed by a symbol stating the name of any individual fixture:
class NewsletterTest &amp;lt; ActiveSupport::TestCase test &amp;#39;a sample test&amp;#39; do assert newsletters(:newsletter).valid? end end And the other one is assigning fixtures to an instance variable in the setup block:</description>
    </item>
    
    <item>
      <title>Running Rake Tasks in a Loop</title>
      <link>https://www.serhatdundar.com/posts/running-rake-tasks-in-a-loop/</link>
      <pubDate>Mon, 03 Apr 2017 01:46:33 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/running-rake-tasks-in-a-loop/</guid>
      <description>Rake tasks in a loop, will only executed once if they are not &amp;ldquo;re-enabled&amp;rdquo;. Take a look at this example:
namespace :yoksis do desc &amp;#39;fetches all references&amp;#39; task :references do mapping = { get_instruction_language: &amp;#39;UnitInstructionLanguage&amp;#39;, get_instruction_type: &amp;#39;UnitInstructionType&amp;#39; } mapping.each do |action, klass| Rake::Task[&amp;#39;yoksis:reference&amp;#39;].invoke(action, klass) end end desc &amp;#39;fetch an individual reference&amp;#39; task :reference, %i[soap_method klass] =&amp;gt; [:environment] do |_, args| puts args[:soap_method] puts args[:klass] end end When you run the yoksis:references task, it will only print out {get_instruction_language: &#39;UnitInstructionLanguage&#39;} and will skip the second item of the mapping hash.</description>
    </item>
    
    <item>
      <title>Using has_many :through for Nested Relations in Rails</title>
      <link>https://www.serhatdundar.com/posts/using-has-many-through-for-nested-relations-in-rails/</link>
      <pubDate>Sat, 20 Aug 2016 21:19:04 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/using-has-many-through-for-nested-relations-in-rails/</guid>
      <description>has_many :through is a useful association type of Rails. It&amp;rsquo;s mostly popular and often used as a join model for many-to-many relations.
However, has_many :through is more than a simple join model, because it conducts INNER JOIN(s) on related models. We can also take the advantage of this behaviour on nested has_many relations. Lets imagine a scenario where we have a nested has_many structure as follows:
Country (has_many :regions) -&amp;gt; Region (has_many :cities) -&amp;gt; City (has_many :districts) -&amp;gt; District Models and tables of the structure:</description>
    </item>
    
  </channel>
</rss>
