<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>security on Blog of Serhat M. Dündar | Ruby, Rails, Golang, PostgreSQL, AWS, Security</title>
    <link>https://www.serhatdundar.com/tags/security/</link>
    <description>Recent content in security on Blog of Serhat M. Dündar | Ruby, Rails, Golang, PostgreSQL, AWS, Security</description>
    <image>
      <url>https://www.serhatdundar.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.serhatdundar.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jan 2022 07:10:50 +0200</lastBuildDate><atom:link href="https://www.serhatdundar.com/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deconstructing and Understanding an SSL Certificate</title>
      <link>https://www.serhatdundar.com/posts/deconstructing-and-understanding-an-ssl-certificate/</link>
      <pubDate>Tue, 25 Jan 2022 07:10:50 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/deconstructing-and-understanding-an-ssl-certificate/</guid>
      <description>Checking SSL certificates on a browser is easy. Just click the green lock icon and you&amp;rsquo;re good to go. But what if doing the same in a more hacker way? This is where openssl comes into play.
Let&amp;rsquo;s start by checking the SSL certificate of this website:
openssl s_client -connect www.serhatdundar.com:443 depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA depth=1 C = US, O = DigiCert Inc, OU = www.</description>
    </item>
    
    <item>
      <title>Storing Passwords in a Database: Hashing, Salts, and Peppers</title>
      <link>https://www.serhatdundar.com/posts/storing-passwords-in-a-database/</link>
      <pubDate>Mon, 24 Jan 2022 01:30:33 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/storing-passwords-in-a-database/</guid>
      <description>&amp;ldquo;How do you store passwords in a database&amp;rdquo;? A very common question for back-end-oriented interviews. After conducting hundreds of technical interviews on different levels, I can confidently say around 50% of the candidates can&amp;rsquo;t answer this question. The most common answer I often got is &amp;ldquo;there is a package/gem/library we use, and it manages the password part&amp;rdquo;.
Well, yes, frameworks, libraries, and packages cover most of the complexity nowadays, but I don&amp;rsquo;t accept this as an excuse for not being curious about essentials.</description>
    </item>
    
    <item>
      <title>A Primitive Hashing Function in Go</title>
      <link>https://www.serhatdundar.com/posts/a-primitive-hashing-function-in-go/</link>
      <pubDate>Sun, 23 Jan 2022 18:30:19 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/a-primitive-hashing-function-in-go/</guid>
      <description>Cryptographic hash functions are complex mathematical calculations. Therefore understanding them requires a considerable amount of time and patience. However, they all have things in common: an input, a cryptographic algorithm, and an output.
Recently, I had a chance to study some popular cryptographic hash functions, such as MD5 and SHA-1, and tried to understand how they really work. Wikipedia pages I linked include a considerable amount of information already, and more can be found online, but what I want to do was understand similarities between them and write my own primitive hashing function in Go.</description>
    </item>
    
    <item>
      <title>SSL/TLS Handshake, Hybrid Encryption and Public Key Infrastructure (PKI)</title>
      <link>https://www.serhatdundar.com/posts/ssl-tls-handshake-hybrid-encryption/</link>
      <pubDate>Sat, 22 Jan 2022 14:00:33 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/ssl-tls-handshake-hybrid-encryption/</guid>
      <description>Hybrid Encryption: Symmetric and Asymmetric Encryption Combined Both symmetric and asymmetric encryption has advantages and disadvantages. So, which one should we use? Well, nowadays we often use them together. Asymmetric encryption is often used to exchange private keys between parties securely. In other words, parties who would communicate establish an asymmetric encryption protocol in the beginning just to exchange private keys. When the private key exchange is completed, they keep communicating by using symmetric encryption - which is faster than asymmetric encryption.</description>
    </item>
    
    <item>
      <title>Symmetric and Asymmetric Encryption</title>
      <link>https://www.serhatdundar.com/posts/symmetric-and-asymmetric-encryption/</link>
      <pubDate>Fri, 21 Jan 2022 14:00:33 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/symmetric-and-asymmetric-encryption/</guid>
      <description>Symmetric Encryption (Private Key Cryptography) In symmetric encryption only a single key, in other words, a private key is used to encrypt and decrypt a message. Symmetric encryption is also known as &amp;ldquo;Private Key Cryptography&amp;rdquo; as the whole encryption is only based on a private key.
Some popular symetric encryption algorithms are:
   Algorithm Cipher Key Size Block/State Size Popularity Notes     AES Block 128, 192, or 256 bits 128 bits 1 The best one.</description>
    </item>
    
    <item>
      <title>Encrypting Sensitive Data With Rails</title>
      <link>https://www.serhatdundar.com/posts/encrypting-sensitive-data-with-rails/</link>
      <pubDate>Mon, 01 Oct 2018 09:33:06 +0200</pubDate>
      
      <guid>https://www.serhatdundar.com/posts/encrypting-sensitive-data-with-rails/</guid>
      <description>The most recent versions (5.1 and 5.2) of Ruby on Rails has shipped with a new feature named as encrypted credentials which replaces the secrets.yml, and enables you to keep sensitive data in an encrypted file named as config/credentials.yml.enc.
However, this feature only works with a single file that is config/credentials.yml.enc. Recently we needed to add some data in our repository, which we wanted to keep as encrypted, but that also didn&amp;rsquo;t really fit into the credentials.</description>
    </item>
    
  </channel>
</rss>
